name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./_site

  summarize_and_create_html:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure REGISTER.md exists and contains Status column
        run: |
          echo "Checking and updating REGISTER.md files..."
          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            register_file="$dir/REGISTER.md"
            if [ ! -f "$register_file" ]; then
              echo "Creating REGISTER.md in $dir"
              mkdir -p "$dir"
              echo -e "| Name | Status |\n|------|--------|" > "$register_file"
            else
              if ! grep -q "| Status |" "$register_file"; then
                echo "Updating REGISTER.md in $dir"
                sed -i '1s/$/| Status |/' "$register_file"
                sed -i '2s/$/|--------|/' "$register_file"
              fi
            fi
          done

      - name: Summarize Registration Status
        id: summarize
        run: |
          echo "Generating assignment registration leaderboard..."
          summary="## Assignment Registration Leaderboard\n\n"
          summary+="| Rank | Assignment | Status |\n"
          summary+="|------|------------|--------|\n"
          
          declare -A status_priority=(
            ["Completed"]=1
            ["In Progress"]=2
            ["Not Started"]=3
            ["Unknown"]=4
          )
          
          leaderboard=()
          
          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            register_file="$dir/REGISTER.md"
            if [ -f "$register_file" ]; then
              assignment_name=$(basename "$dir")
              status=$(grep -i "| Status |" "$register_file" | tail -n +3 | cut -d'|' -f3 | xargs)
              status="${status:-Unknown}"
              case "$status" in
                "In Progress")
                  badge="![In Progress](https://img.shields.io/badge/status-in--progress-yellow)"
                  ;;
                "Completed")
                  badge="![Completed](https://img.shields.io/badge/status-completed-brightgreen)"
                  ;;
                "Not Started")
                  badge="![Not Started](https://img.shields.io/badge/status-not--started-lightgrey)"
                  ;;
                *)
                  badge="![Unknown](https://img.shields.io/badge/status-unknown-lightgrey)"
                  ;;
              esac
              priority=${status_priority["$status"]}
              leaderboard+=("$priority|$assignment_name|$badge")
            fi
          done
          
          IFS=$'\n' sorted_leaderboard=($(sort <<<"${leaderboard[*]}"))
          unset IFS
          
          rank=1
          for entry in "${sorted_leaderboard[@]}"; do
            IFS='|' read -r priority assignment_name badge <<< "$entry"
            summary+="| $rank | $assignment_name | $badge |\n"
            rank=$((rank + 1))
          done
          
          echo "$summary" > summary.md
          echo "Leaderboard generated successfully."

      - name: Update Assignments README.md
        run: |
          echo "Updating Assignments README.md..."
          cat summary.md > README.md
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            git add "$dir/REGISTER.md"
          done
          git commit -m "Update assignment registration leaderboard and ensure REGISTER.md"
          git push || echo "Push failed. This could be due to permissions or conflicts. Please check the repository settings or resolve conflicts manually."

      - name: Generate HTML Files with Navigation Sidebar
        run: |
          echo "Generating HTML files for each assignment..."
          sudo apt-get update
          sudo apt-get install -y pandoc
          sidebar="<nav><ul>"
          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            assignment_name=$(basename "$dir")
            sidebar+="<li><a href=\"$assignment_name.html\">$assignment_name</a></li>"
          done
          sidebar+="</ul></nav>"

          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            assignment_name=$(basename "$dir")
            register_file="$dir/REGISTER.md"
            task_file="$dir/README.md"
            
            if [ ! -f "$task_file" ]; then
              echo "Error: $task_file does not exist. Skipping $assignment_name."
              continue
            fi
            
            # Generate sidebar for registered students
            student_list=$(tail -n +3 "$register_file" | awk -F'|' '{print $2}' | xargs -I{} echo "<li>{}</li>")
            student_sidebar="<nav><h2>Registered Students</h2><ul>$student_list</ul></nav>"
            
            html_content="<html><head><title>$assignment_name</title></head><body>$sidebar<main><h1>$assignment_name</h1>$(pandoc \"$task_file\") $student_sidebar</main></body></html>"
            echo "$html_content" > "$assignment_name.html"
          done

          # Generate index.html for the repo root directory
          if [ -f "README.md" ]; then
            html_content="<html><head><title>Assignments</title></head><body>$sidebar<main>$(pandoc README.md)</main></body></html>"
            echo "$html_content" > index.html
          else
            echo "Error: README.md does not exist in the repo root. Skipping index.html generation."
          fi

          echo "HTML files generated successfully."
          
          git add *.html
          git commit -m "Generate HTML files with navigation sidebar and registered students"
          git push || echo "Push failed. This could be due to permissions or conflicts. Please check the repository settings or resolve conflicts manually."

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, summarize_and_create_html]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  validate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate REGISTER.md Files
        run: |
          echo "Validating REGISTER.md files..."
          find . -mindepth 1 -maxdepth 1 -type d \( ! -name ".github" ! -name "Lib" ! -name "Group Activities" \) | while read -r dir; do
            register_file="$dir/REGISTER.md"
            if [ -f "$register_file" ];then
              if ! grep -q "| Status |" "$register_file"; then
                echo "Adding missing Status column to $register_file"
                sed -i '1s/$/| Status |/' "$register_file"
                sed -i '2s/$/|--------|/' "$register_file"
              fi
            fi
          done
          echo "Validation complete."
